// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  firstName String
  lastName  String
  password  String
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  reviews   Review[]
  orders    Order[]
  cart      Cart?
  Message   Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  banner      String?
  bannerColor String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  books       BookCategory[]
}

model Author {
  id        Int          @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String?
  thumpnail Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  books     BookAuthor[]
}

model Book {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  price       Float
  images      Json[]
  discount    Float?         @default(0)
  quantity    Int            @default(1)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  categories  BookCategory[]
  authors     BookAuthor[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  promotionId Int?
  promotion   Promotion?     @relation(fields: [promotionId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float    @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  bookId    Int
  userId    Int?
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id         Int         @id @default(autoincrement())
  status     OrderStatus
  firstName  String
  lastName   String
  phone      String
  email      String
  total      Float
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  userId     Int?
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  bookId    Int
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Promotion {
  id        Int       @id @default(autoincrement())
  type      Json
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  books     Book[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  cartItems CartItem[]
  userId    Int        @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  bookId    Int
  cartId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model About {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BookAuthor {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    Int
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([bookId, authorId])
}

model BookCategory {
  id         Int      @id @default(autoincrement())
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([bookId, categoryId])
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPING
  SHIPPED
  CANCELED
}
